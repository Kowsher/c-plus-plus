#include<bits/stdc++.h>
using namespace std;
///*****    I/O  ********************/////
#define RI(X) scanf("%d", &(X))
#define RII(X, Y) scanf("%d%d", &(X), &(Y))
#define RIII(X, Y, Z) scanf("%d%d%d", &(X), &(Y), &(Z))
#define DRI(X) int (X); scanf("%d", &X)
#define DRII(X, Y) int X, Y; scanf("%d%d", &X, &Y)
#define DRIII(X, Y, Z) int X, Y, Z; scanf("%d%d%d", &X, &Y, &Z)
#define RS(X) scanf("%s", (X))
#define ENDL()           printf("\n")
///************ LOOP *************/////
#define REP(I, N) for (int I = 0; I < (N); I++)
#define REPP(I, A, B) for (int I = (A); I < (B); I++)
///********* SORT ****************////
#define ALL(X) (X).begin(), (X).end()
///********* SIZE ****************////
#define SZ(X) ((int)(X).size())
///********** define ***********////
#define WHITE 0
#define GRAY 1
#define BLACK 2
#define SQR(x) ((x)*(x))
#define PI 2*acos(0)
#define EPS 1e-7
#define infinity (1<<28)
///********* typedef ***********///
typedef long long LL;
typedef unsigned int U32;
typedef unsigned long long ULL;
typedef vector<int> VI;
typedef vector<LL> VLL;
typedef vector<double> VD;
typedef vector<char> VC;
typedef vector<string> VS;
typedef vector<vector<int> > VVI;
typedef map<int, int> MII;
typedef map<string, int> MSI;
typedef map<int, string> MIS;
typedef map<string, string> MSS;
typedef map<string, char> MSC;
typedef pair <int, int > PII;

int parent[102], came[102];
void makeset(int n){
    for(int i=1; i<=n; i++)parent[i]=i;
}

int finding(int represent){

   if(parent[represent]==represent)return represent;
   else return parent[represent]=finding(parent[represent]);
}

bool Union(int a,int b){

 int u=finding(a);
 int v=finding(b);

  if(u!=v){parent[v]=u;}
}
int main()
{
   LL a,b,ans=1;
   DRII(n,m);
   int arr[m],brr[m];
   makeset(n);
   REP(i,m)
   {
       RII(a,b);
       Union(a,b);
       arr[i]=a;
       brr[i]=b;
   }
   REP(i,m)
   {
       Union(arr[i],brr[i]);
       //cout<<parent[arr[i]]<<" "<<parent[brr[i]]<<endl;
       if(came[arr[i]]==0){if(parent[arr[i]]!=arr[i])ans=ans*2;came[arr[i]]++;}
       if(came[brr[i]]==0){if(parent[brr[i]]!=brr[i])ans=ans*2;came[brr[i]]++;}
   }
    cout<<ans<<endl;



    return 0;
}
