#include<bits/stdc++.h>
using namespace std;

vector<int>edge[100];
int cost[100][100];
int Distance[100];
int parent[100];

int bfs(int start, int vertex, int End)
{
    priority_queue <int, vector<int>, greater<int> >q;
    q.push(start);

    parent[start]=-1;
    for(int i=1; i<=vertex; i++)Distance[i]=INT_MAX;
    Distance[start]=0;

    while(!q.empty()){
        int u=q.top();

        q.pop();
        for(int i=0; i<edge[u].size();i++){
            int v=edge[u][i];
            if(Distance[u]+cost[u][v]<Distance[v])
            {
                Distance[v]=Distance[u]+cost[u][v];
                q.push(v);
                parent[v]=u;
            }
        }
    }
    cout<<"The shortest distance "<<Distance[End]<<endl;
}
void Path(int v)
{
    cout<<v<<" ";
    while(parent[v]!=-1)
    {
        v = parent[v];
        cout<<v<<" ";
    }
}
int main()
{
    int e,u,v,start, vertex, wight, End;
    cout<<"Enter the vertex &&  edge of graph ";cin>>vertex>>e;
    cout<<"Input the connected node && wight"<<endl;
    for(int i=0; i<e; i++){
        cin>>u>>v>>wight;
        edge[u].push_back(v);
        cost[u][v]=wight;

    }
    cout<<"Enter the node from starting && ending ";cin>>start>>End;
    bfs(start, vertex, End);
    cout<<"The path is ";
    Path(End);


    return 0;
}
