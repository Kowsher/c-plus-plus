///Time complexity O(n^2)


#include<bits/stdc++.h>
using namespace std;

struct Job
{
    int start, finish, profit;
};
bool Job_sort(Job A, Job B)
{
    return A.finish<B.finish;
}

int Job_Scheduling(Job arr[], int n)
{
    int Profit[n+1];
    for(int i=0; i<n; i++)
    {
        Profit[i]=arr[i].profit;
    }
    for(int i=1; i<n; i++)
    {
        for(int j=0; j<i; j++)
        {
            if(arr[i].start<arr[j].finish)break;
            else
            {
                //if(Profit[i]<arr[i].profit+arr[j].profit)Profit[i]=arr[i].profit+arr[j].profit;
                Profit[i]=max(Profit[i],arr[i].profit+arr[j].profit);
            }
        }
    }
    return Profit[n-1];
}

int main()
{
    Job arr[]={{1,4,3}, {2,6, 5}, {4, 7, 2}, {6,8,6}, {5,9,4},{7,10, 8}};
     int n = sizeof(arr)/sizeof(arr[0]);
    sort(arr, arr+n, Job_sort);
    cout<<Job_Scheduling(arr, n);

    return 0;
}
