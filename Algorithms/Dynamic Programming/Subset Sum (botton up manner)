#include<bits/stdc++.h>
using namespace std;
int subarr[1000][1000];

/**
 complexity O(sum*n)
 space O(sum*n)
 path complexity O(n)
*/

int  IsSubarrSum(int n, int sum, int arr[])
{
    // The value of subarr[i][j] will be true if there is a
    // subarr of arr[0..j-1] with sum equal to i


    // If sum is 0, then answer is true
    for (int i = 0; i <= n; i++)subarr[i][0] = 1;

    // If sum is not 0 and arr is empty, then answer is false
    for (int i = 1; i <= sum; i++)subarr[0][i] = 0;

     // Fill the subarr table in botton up manner
     for (int i = 1; i <= n; i++)
     {
       for (int j = 1; j <= sum; j++)
       {
         if(j<arr[i-1])
         subarr[i][j] = subarr[i-1][j];
         if (j >= arr[i-1])
           subarr[i][j] = subarr[i-1][j] || subarr[i - 1][j-arr[i-1]];

           cout<<subarr[i][j]<<" ";
       }
       cout<<endl;
     }

     return subarr[n][sum];
}
void Path(int n, int sum, int arr[])
{
    while(n>=1)
    {
        if(subarr[n][sum]==subarr[n-1][sum])
        {

            n--;
        }
        else
        {
            cout<<arr[n-1]<<" ";

            sum=sum-arr[n-1];
            n--;
        }
    }
}
int main()
{
    int n, sum; /// number of element of arr;
    cin>>n>>sum;
    int arr[n];
    for(int i=0; i<n; i++)
    {
         cin>>arr[i];
    }
    IsSubarrSum(n,sum,arr)?puts("Yes"):puts("No");
    Path(n,sum, arr);


    return 0;
}
