#include <bits/stdc++.h>

using namespace std;
/// Returns the maximum value that can be put in a knapsack of capacity W
int wt[100], vl[100],cap,n;
int table[100][100];

int KnapSack ()
{
    int i, w;

    /// Build table K[][] in bottom up manner
    for (i=0; i<=n; i++)
    {
        for (w=0; w<=cap; w++)
        {
            if (i==0 || w==0)table[i][w]=0;

            else if (wt[i-1]<=w)table[i][w]=max (vl[i-1]+table[i-1][w-wt[i-1]], table[i-1][w]);

            else table[i][w]=table[i-1][w];
        }
    }
    return table[n][cap];
}
void Path(int n, int cap)
{
    if(n==0 || cap==0)return;
    if(table[n][cap]==table[n-1][cap])Path(n-1,cap);
    else{
        cout<<wt[n-1]<<" ";
        Path(n-1,cap-wt[n-1]);
    }
}

int main ()
{

    cout<<"Input the number of item and capacity : ";
    cin >> n >> cap;
    cout<<"Input the wight and its value according to item number " <<endl;

    for (int i=0; i<n; i++){
        cin >> wt[i]>>vl[i];
    }
    cout << KnapSack()<<endl;;
    Path(n,cap);
    return 0;
}
