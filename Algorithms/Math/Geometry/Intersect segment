#include<bits/stdc++.h>
using namespace std;

struct Point
{
    int x,y;
};

int Orientation(Point p1, Point p2, Point p3)
{
    int d=(p2.y-p1.y)*(p3.x-p2.x)-(p2.x - p1.x) * (p3.y - p2.y);///sole m1(p1,p2) and m2(p2,p3)
    return d;
}

bool onSegment(Point p, Point q, Point r)
{
    if (q.x <= max(p.x, r.x) && q.x >= min(p.x, r.x) &&
        q.y <= max(p.y, r.y) && q.y >= min(p.y, r.y))
       return true;

    return false;
}
bool Intersect(Point p1, Point q1, Point p2, Point q2)
{
    int o1=Orientation(p1, q1, p2);
    int o2=Orientation(p1, q1, q2);
    int o3=Orientation(p2, q2, p1);
    int o4=Orientation(p2, q2, q1);

    if (o1 != o2 && o3 != o4) return true;
    // p1, q1 and p2 are colinear and p2 lies on segment p1q1
    if (o1 == 0 && onSegment(p1, p2, q1)) return true;

    // p1, q1 and p2 are colinear and q2 lies on segment p1q1
    if (o2 == 0 && onSegment(p1, q2, q1)) return true;

    // p2, q2 and p1 are colinear and p1 lies on segment p2q2
    if (o3 == 0 && onSegment(p2, p1, q2)) return true;

     // p2, q2 and q1 are colinear and q1 lies on segment p2q2
    if (o4 == 0 && onSegment(p2, q1, q2)) return true;

    return false;
}
int main()
{
    struct Point p1 = {1, 1}, q1 = {10, 1};
    struct Point p2 = {1, 2}, q2 = {10, 2};
    Intersect(p1, q1, p2, q2)? puts("yes"):puts("no");


    return 0;
}
